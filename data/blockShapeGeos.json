{
	"$schema": "schemas/blockShapeGeos.schema.json",
	
	"block": [
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16]
		}
	],
	"cross_texture": [
		{
			"pos": [0, 0, 8],
			"size": [16, 16, 0],
			"rot": [0, 45, 0]
		},
		{
			"pos": [0, 0, 8],
			"size": [16, 16, 0],
			"rot": [0, -45, 0]
		}
	],
	"slab": [
		{
			"if": "minecraft:vertical_half == bottom",
			"pos": [0, 0, 0],
			"size": [16, 8, 16]
		},
		{
			"if": "minecraft:vertical_half == top",
			"pos": [0, 8, 0],
			"size": [16, 8, 16]
		}
	],
	"double_slab": [ // with outlines it will be very apparent that these are double slabs
		{
			"pos": [0, 0, 0],
			"size": [16, 8, 16]
		},
		{
			"pos": [0, 8, 0],
			"size": [16, 8, 16]
		}
	],
	"stairs": [
		{
			"if": "upside_down_bit == 0",
			"pos": [0, 0, 0],
			"size": [16, 8, 16]
		},
		{
			"if": "upside_down_bit == 0",
			"pos": [8, 8, 0],
			"size": [8, 8, 16]
		},
		{
			"if": "upside_down_bit == 1",
			"pos": [0, 8, 0],
			"size": [16, 8, 16]
		},
		{
			"if": "upside_down_bit == 1",
			"pos": [8, 0, 0],
			"size": [8, 8, 16]
		}
	],
	"slime_block": [
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16]
		},
		{
			"pos": [3, 3, 3],
			"size": [10, 10, 10]
		}
	],
	"chest": [ // the side textures are split up so we have to have 2 cubes :(
		{
			"pos": [1, 0, 1],
			"size": [14, 10, 14],
			"textures": {
				"*": "#tex",
				"up": "none"
			},
			"texture_size": [64, 64],
			"uv": {
				"side": [0, 33],
				"north": [14, 33],
				"down": [28, 19]
			}
		},
		{
			"pos": [1, 10, 1],
			"size": [14, 4, 14],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [64, 64],
			"uv": {
				"side": [0, 14],
				"north": [14, 14],
				"down": [28, 0],
				"up": [14, 0]
			}
		},
		{
			"pos": [7, 7, 0],
			"size": [2, 4, 1],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [64, 64],
			"uv": {
				"*": [0, 1]
			}
		}
	],
	"honey_block": [ // this is unofficial (i.e. not in https://wiki.bedrock.dev/blocks/block-shapes.html)
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"*": "down"
			}
		},
		{
			"pos": [1, 1, 1],
			"size": [14, 14, 14] // the bottom texture uses the transparent outer layer texture, probably a bug.
		}
	],
	"farmland": [ // another "unofficial" block shape
		{
			"pos": [0, 0, 0],
			"size": [16, 15, 16]
		}
	],
	"torch": [
		{
			"if": "torch_facing_direction == top",
			"pos": [7, 0, 7],
			"size": [2, 10, 2],
			"uv": {
				"up": [7, 6],
				"down": [7, 14]
			}
		},
		{
			"if": "torch_facing_direction != top", // the rest of the rotations are handled in blockStateDefinitions.json
			"pos": [-1, 3.5, 7],
			"size": [2, 10, 2],
			"uv": {
				"up": [7, 6],
				"down": [7, 14],
				"side": [7, 6]
			},
			"rot": [0, 0, 22.5],
			"pivot": [0, 3.5, 8]
		}
	],
	"fence": [ // fences don't have block states, we'll have to read blocks next to each other :((
		{
			"pos": [6, 0, 6],
			"size": [4, 16, 4]
		}
	],
	"template_fence_gate": [
		{
			"pos": [0, 5, 7],
			"size": [2, 11, 2]
		},
		{
			"pos": [14, 5, 7],
			"size": [2, 11, 2]
		},
		{
			"if": "open_bit == 0",
			"pos": [2, 6, 7],
			"size": [12, 3, 2]
		},
		{
			"if": "open_bit == 0",
			"pos": [2, 12, 7],
			"size": [12, 3, 2]
		},
		{
			"if": "open_bit == 0",
			"pos": [6, 9, 7],
			"size": [4, 3, 2]
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 6, 9],
			"size": [2, 3, 6]
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 12, 9],
			"size": [2, 3, 6]
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 9, 13],
			"size": [2, 3, 2]
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 6, 9],
			"size": [2, 3, 6]
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 12, 9],
			"size": [2, 3, 6]
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 9, 13],
			"size": [2, 3, 2]
		}
	],
	"fence_gate": [
		{
			"if": "in_wall_bit == 0",
			"copy": "template_fence_gate"
		},
		{
			"if": "in_wall_bit == 1",
			"copy": "template_fence_gate",
			"translate": [0, -3, 0]
		}
	],
	"template_bamboo_fence_gate": [
		{
			"pos": [0, 5, 7],
			"size": [2, 11, 2],
			"uv": {
				"*": [0, 2]
			}
		},
		{
			"pos": [14, 5, 7],
			"size": [2, 11, 2],
			"uv": {
				"*": [0, 2]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [2, 6, 7],
			"size": [4, 3, 2],
			"uv": {
				"*": [3, 9]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [2, 12, 7],
			"size": [4, 3, 2],
			"uv": {
				"*": [3, 9]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [6, 6, 7],
			"size": [2, 9, 2],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [8, 6, 7],
			"size": [2, 9, 2],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [10, 6, 7],
			"size": [4, 3, 2],
			"uv": {
				"*": [3, 9]
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [10, 12, 7],
			"size": [4, 3, 2],
			"uv": {
				"*": [3, 9]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 6, 9],
			"size": [2, 3, 4],
			"uv": {
				"side": [3, 9],
				"up": [3, 1],
				"down": [3, 1]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 12, 9],
			"size": [2, 3, 4],
			"uv": {
				"side": [3, 9],
				"up": [3, 1],
				"down": [3, 1]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [0, 6, 13],
			"size": [2, 9, 2],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 6, 9],
			"size": [2, 3, 4],
			"uv": {
				"side": [3, 9],
				"up": [3, 1],
				"down": [3, 1]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 12, 9],
			"size": [2, 3, 4],
			"uv": {
				"side": [3, 9],
				"up": [3, 1],
				"down": [3, 1]
			}
		},
		{
			"if": "open_bit == 1",
			"pos": [14, 6, 13],
			"size": [2, 9, 2],
			"uv": {
				"*": [8, 3]
			}
		}
	],
	"bamboo_fence_gate": [
		{
			"if": "in_wall_bit == 0",
			"copy": "template_bamboo_fence_gate"
		},
		{
			"if": "in_wall_bit == 1",
			"copy": "template_bamboo_fence_gate",
			"translate": [0, -3, 0]
		}
	],
	"door": [ // upper door blocks don't contain all the block states, and I think that MCBE relies on the lower door to do everything. e.g. look at the nbt of a structure with door tops only, and you'll see why we need to do it this way.
		{
			"if": "upper_block_bit == 0",
			"pos": [13, 0, 0],
			"size": [3, 16, 16],
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "upper_block_bit == 0",
			"pos": [13, 16, 0], // upper half
			"size": [3, 16, 16],
			"textures": {
				"*": "side"
			},
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"trapdoor": [ // direction 1 = east hinge, 2 = north hinge, 0 = west hinge, 3 = south hinge [west, east, north, south]
		{
			"if": "open_bit == 0 && upside_down_bit == 0",
			"pos": [0, 0, 0],
			"size": [16, 3, 16]
		},
		{
			"if": "open_bit == 0 && upside_down_bit == 1",
			"pos": [0, 13, 0],
			"size": [16, 3, 16]
		},
		{
			"if": "open_bit == 1",
			"pos": [13, 0, 0],
			"size": [3, 16, 16]
		}
	],
	"template_book": [
		{
			"pos": [1, 0, 3],
			"size": [6, 0, 10],
			"rot": [0, 0, 4.0563],
			"pivot": [7, 0, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book"
			},
			"uv": {
				"*": [16, 0]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [9, 0, 3],
			"size": [6, 0, 10],
			"rot": [0, 0, -4.0563],
			"pivot": [9, 0, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book"
			},
			"uv": {
				"*": [0, 0]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [7, 0, 3],
			"size": [2, 0, 10],
			"textures": {
				"*": "textures/entity/enchanting_table_book"
			},
			"uv": {
				"*": [12, 0]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [3, 0, 4],
			"size": [5, 1, 8],
			"rot": [0, 0, 4.0563],
			"pivot": [8, 1, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book",
				"down": "none"
			},
			"uv": {
				"*": [1, 11]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [8, 0, 4],
			"size": [5, 1, 8],
			"rot": [0, 0, -4.0563],
			"pivot": [8, 1, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book",
				"down": "none"
			},
			"uv": {
				"*": [1, 11]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [3, 1, 4],
			"size": [5, 0, 8],
			"rot": [0, 0, 24.3380],
			"pivot": [8, 1, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book"
			},
			"uv": {
				"*": [1, 11]
			},
			"texture_size": [64, 32]
		},
		{
			"pos": [8, 1, 4],
			"size": [5, 0, 8],
			"rot": [0, 0, -24.3380],
			"pivot": [8, 1, 8],
			"textures": {
				"*": "textures/entity/enchanting_table_book"
			},
			"uv": {
				"*": [1, 11]
			},
			"texture_size": [64, 32]
		}
	],
	"enchanting_table": [
		{
			"pos": [0, 0, 0],
			"size": [16, 12, 16]
		},
		{
			"copy": "template_book",
			"translate": [0, 13, 0]
		}
	],
	"carpet": [
		{
			"pos": [0, 0, 0],
			"size": [16, 1, 16]
		}
	],
	"fire": [ // very wacky
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 0],
			"rot": [-3.5, 0, 0],
			"pivot": [8, 0, 0]
		},
		{
			"pos": [0, 0, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, 3.5],
			"pivot": [0, 0, 8]
		},
		{
			"pos": [0, 0, 16],
			"size": [16, 16, 0],
			"rot": [3.5, 0, 0],
			"pivot": [8, 0, 16]
		},
		{
			"pos": [16, 0, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, -3.5],
			"pivot": [16, 0, 8]
		},
		{
			"pos": [0, 0, 5],
			"size": [16, 16, 0],
			"rot": [-22.5, 0, 0],
			"pivot": [8, 0, 5]
		},
		{
			"pos": [5, 0, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, 22.5],
			"pivot": [5, 0, 8]
		},
		{
			"pos": [0, 0, 11],
			"size": [16, 16, 0],
			"rot": [22.5, 0, 0],
			"pivot": [8, 0, 11]
		},
		{
			"pos": [11, 0, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, -22.5],
			"pivot": [11, 0, 8]
		}
	],
	"redstone_dust": [ // again, the shape isn't in block states. because we'll have to change the texture as well I'll put an entire cube here and make TextureAtlas.js deal with it...
		{
			// "pos": [0.125, 0.125, 0.125],
			// "size": [15.75, 15.75, 15.75]
			"pos": [0, 0.125, 0],
			"size": [16, 0, 16]
		}
	],
	"rail": [
		{
			"if": "rail_direction < 2 && rail_data_bit ?? 0 == 0", // flat on floor and unpowered
			"pos": [0, 1, 0],
			"size": [16, 0, 16]
		},
		{
			"if": "rail_direction > 5 || rail_direction < 2 && rail_data_bit ?? 0 == 1", // curved on floor (regular rails) or powered
			"pos": [0, 1, 0],
			"size": [16, 0, 16],
			"textures": {
				"*": "up"
			}
		},
		{
			"if": "rail_direction >= 2 && rail_direction <= 5 && rail_data_bit ?? 0 == 0", // sloped and unpowered
			"pos": [0, 1, 0],
			"size": [16, 0, 22.6274], // 16√2 ≈ 22.6274
			"rot": [45, 0, 0],
			"pivot": [8, 1, 0],
			"uv": {
				"*": [0, 0]
			},
			"uv_sizes": {
				"*": [16, 16]
			}
		},
		{
			"if": "rail_direction >= 2 && rail_direction <= 5 && rail_data_bit ?? 0 == 1", // sloped and powered
			"pos": [0, 1, 0],
			"size": [16, 0, 22.6274], // 16√2 ≈ 22.6274
			"rot": [45, 0, 0],
			"pivot": [8, 1, 0],
			"textures": {
				"*": "up"
			},
			"uv": {
				"*": [0, 0]
			},
			"uv_sizes": {
				"*": [16, 16]
			}
		}
	],
	"template_pink_petal_stem_1": [
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 1, 0],
			"rot": [0, 45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61" // cherry grove petal tint
		},
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 1, 0],
			"rot": [0, -45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61"
		}
	],
	"template_pink_petal_stem_2": [
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 2, 0],
			"rot": [0, 45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61"
		},
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 2, 0],
			"rot": [0, -45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61"
		}
	],
	"template_pink_petal_stem_3": [
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 3, 0],
			"rot": [0, 45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61"
		},
		{
			"pos": [-0.5, 0, 0],
			"size": [1, 3, 0],
			"rot": [0, -45, 0],
			"pivot": [0, 0, 0],
			"variant": 1,
			"uv": {
				"*": [0, 4]
			},
			"tint": "#B6DB61"
		}
	],
	"template_pink_petal_small_tall": [
		{
			"copy": "template_pink_petal_stem_3",
			"translate": [1.5, 0, 1.5]
		},
		{
			"pos": [0, 3, 0],
			"size": [3, 0, 3],
			"variant": 0
		}
	],
	"template_pink_petal_small_medium": [
		{
			"copy": "template_pink_petal_stem_2",
			"translate": [1.5, 0, 1.5]
		},
		{
			"pos": [0, 2, 0],
			"size": [3, 0, 3],
			"variant": 0
		}
	],
	"pink_petals": [
		{
			"copy": "template_pink_petal_small_tall",
			"translate": [13, 0, 4],
			"uv": {
				"*": [0, 4]
			}
		},
		{
			"copy": "template_pink_petal_small_tall",
			"translate": [10, 0, 0],
			"uv": {
				"*": [3, 0]
			}
		},
		{
			"copy": "template_pink_petal_small_tall",
			"translate": [8, 0, 5],
			"uv": {
				"*": [5, 5]
			}
		},
		{
			"if": "growth >= 1",
			"copy": "template_pink_petal_stem_1",
			"translate": [11.5, 0, 11.5]
		},
		{
			"if": "growth >= 1",
			"pos": [8, 1, 8],
			"size": [7, 0, 7],
			"variant": 0,
			"uv": {
				"*": [1, 8]
			}
		},
		{
			"if": "growth >= 2",
			"copy": "template_pink_petal_small_medium",
			"translate": [0, 0, 9],
			"uv": {
				"*": [13, 9]
			}
		},
		{
			"if": "growth >= 2",
			"copy": "template_pink_petal_small_medium",
			"translate": [5, 0, 8],
			"uv": {
				"*": [8, 8]
			}
		},
		{
			"if": "growth >= 2",
			"copy": "template_pink_petal_stem_2",
			"translate": [4, 0, 14]
		},
		{
			"if": "growth >= 2",
			"pos": [2, 2, 12],
			"size": [4, 0, 4],
			"variant": 0,
			"uv": {
				"*": [10, 12]
			}
		},
		{
			"if": "growth >= 3",
			"copy": "template_pink_petal_stem_2",
			"translate": [4.5, 0, 3.5]
		},
		{
			"if": "growth >= 3",
			"pos": [1, 2, 0],
			"size": [7, 0, 7],
			"variant": 0,
			"uv": {
				"*": [8, 0]
			}
		}
	],
	"pressure_plate": [
		{
			"if": "redstone_signal == 0",
			"pos": [1, 0, 1],
			"size": [14, 1, 14]
		},
		{
			"if": "redstone_signal > 0",
			"pos": [1, 0, 1],
			"size": [14, 0.5, 14]
		}
	],
	"rows": [
		{
			"pos": [0, -1, 4],
			"size": [16, 16, 0],
			"uv": {
				"north": [0, 0]
			}
		},
		{
			"pos": [0, -1, 12],
			"size": [16, 16, 0],
			"uv": {
				"north": [0, 0]
			}
		},
		{
			"pos": [4, -1, 0],
			"size": [0, 16, 16],
			"uv": {
				"west": [0, 0]
			}
		},
		{
			"pos": [12, -1, 0],
			"size": [0, 16, 16],
			"uv": {
				"west": [0, 0]
			}
		}
	],
	"cake": [
		{
			"if": "bite_counter == 0",
			"pos": [1, 0, 1],
			"size": [14, 8, 14]
		},
		{
			"if": "bite_counter == 1",
			"pos": [1, 0, 1],
			"size": [12, 8, 14]
		},
		{
			"if": "bite_counter == 2",
			"pos": [1, 0, 1],
			"size": [10, 8, 14]
		},
		{
			"if": "bite_counter == 3",
			"pos": [1, 0, 1],
			"size": [8, 8, 14]
		},
		{
			"if": "bite_counter == 4",
			"pos": [1, 0, 1],
			"size": [6, 8, 14]
		},
		{
			"if": "bite_counter == 5",
			"pos": [1, 0, 1],
			"size": [4, 8, 14]
		},
		{
			"if": "bite_counter == 6",
			"pos": [1, 0, 1],
			"size": [2, 8, 14]
		}
	],
	"multi_face": [
		{
			"if": "multi_face_direction_bits & 1 > 0",
			"pos": [0, 0.0625, 0],
			"size": [16, 0, 16]
		},
		{
			"if": "multi_face_direction_bits & 2 > 0",
			"pos": [0, 15.9375, 0],
			"size": [16, 0, 16]
		},
		{
			"if": "multi_face_direction_bits & 4 > 0",
			"pos": [0, 0, 15.9375],
			"size": [16, 16, 0]
		},
		{
			"if": "multi_face_direction_bits & 8 > 0",
			"pos": [15.9375, 0, 0],
			"size": [0, 16, 16]
		},
		{
			"if": "multi_face_direction_bits & 16 > 0",
			"pos": [0, 0, 0.0625],
			"size": [16, 16, 0]
		},
		{
			"if": "multi_face_direction_bits & 32 > 0",
			"pos": [0.0625, 0, 0],
			"size": [0, 16, 16]
		}
	],
	"vine": [
		{
			"if": "vine_direction_bits & 1 > 0",
			"pos": [0, 0, 15.25],
			"size": [16, 16, 0]
		},
		{
			"if": "vine_direction_bits & 2 > 0",
			"pos": [15.25, 0, 0],
			"size": [0, 16, 16]
		},
		{
			"if": "vine_direction_bits & 4 > 0",
			"pos": [0, 0, 0.75],
			"size": [16, 16, 0]
		},
		{
			"if": "vine_direction_bits & 8 > 0",
			"pos": [0.75, 0, 0],
			"size": [0, 16, 16]
		}
		// TODO: add ceiling vines by checking blocks above
		// {
		// 	"if": "$structure_shapes[0][1][0] == cube",
		// 	"pos": [0, 15.25, 0],
		// 	"size": [16, 0, 16]
		// }
	],
	"daylight_detector": [ // the variant isn't in the block state since the inverted block is technically different...
		{
			"pos": [0, 0, 0],
			"size": [16, 6, 16]
		}
	],
	"wall": [
		{
			"if": "wall_post_bit == 1",
			"pos": [4, 0, 4],
			"size": [8, 16, 8]
		},
		{
			"if": "wall_connection_type_east == short",
			"pos": [0, 0, 5],
			"size": [8, 13, 6]
		},
		{
			"if": "wall_connection_type_east == tall",
			"pos": [0, 0, 5],
			"size": [8, 16, 6]
		},
		{
			"if": "wall_connection_type_north == short",
			"pos": [5, 0, 0],
			"size": [6, 13, 8]
		},
		{
			"if": "wall_connection_type_north == tall",
			"pos": [5, 0, 0],
			"size": [6, 16, 8]
		},
		{
			"if": "wall_connection_type_south == short",
			"pos": [5, 0, 8],
			"size": [6, 13, 8]
		},
		{
			"if": "wall_connection_type_south == tall",
			"pos": [5, 0, 8],
			"size": [6, 16, 8]
		},
		{
			"if": "wall_connection_type_west == short",
			"pos": [8, 0, 5],
			"size": [8, 13, 6]
		},
		{
			"if": "wall_connection_type_west == tall",
			"pos": [8, 0, 5],
			"size": [8, 16, 6]
		}
	],
	"nether_portal": [
		{
			"if": "portal_axis == x", // could do this with rotations as well. idk, i like this.
			"pos": [0, 0, 6],
			"size": [16, 16, 4]
		},
		{
			"if": "portal_axis == z",
			"pos": [6, 0, 0],
			"size": [4, 16, 16]
		}
	],
	"button": [
		{
			"if": "button_pressed_bit == 0",
			"pos": [5, 0, 6],
			"size": [6, 2, 4]
		},
		{
			"if": "button_pressed_bit == 1",
			"pos": [5, 0, 6],
			"size": [6, 1, 4]
		}
	],
	"chain": [
		{
			"pos": [6.5, 0, 8],
			"size": [3, 16, 0],
			"rot": [0, 45, 0],
			"uv": {
				"north": [0, 0] // north on zero-depth faces
			}
		},
		{
			"pos": [6.5, 0, 8],
			"size": [3, 16, 0],
			"rot": [0, -45, 0],
			"uv": {
				"north": [0, 0]
			},
			"textures": {
				"north": "down" // on chains, the first texture is side (which will be done above), and the second is down/up which we use here
			}
		}
	],
	"lever": [
		{ // default orientation is on the floor, facing north/south
			"pos": [5, 0, 4],
			"size": [6, 3, 8],
			"textures": {
				"*": "east" // this maps to lever_particle which is the cobblestone texture
			}
		},
		{
			"if": "open_bit == 0",
			"pos": [7, 1, 7],
			"size": [2, 10, 2],
			"uv": {
				"side": [7, 6],
				"down": [7, 8],
				"up": [7, 6]
			},
			"textures": {
				"east": "west" // without this, the east side of levers would be fully cobblestone
			},
			"rot": [-40, 0, 0],
			"pivot": [8, 0, 8]
		},
		{
			"if": "open_bit == 1",
			"pos": [7, 1, 7],
			"size": [2, 10, 2],
			"uv": {
				"side": [7, 6],
				"down": [7, 8],
				"up": [7, 6]
			},
			"textures": {
				"east": "west" // without this, the east side of levers would be fully cobblestone
			},
			"rot": [40, 0, 0],
			"pivot": [8, 0, 8]
		}
	],
	"ladder": [ // don't think about this, it needs to be like this to work with existing facing_direction rotation definitions
		{
			"pos": [0, 15.25, 0],
			"size": [16, 0, 16]
		}
	],
	"conduit": [
		{
			"pos": [5, 0, 5],
			"size": [6, 6, 6],
			"uv": {
				"west": [12, 6],
				"east": [0, 6],
				"down": [12, 0],
				"up": [6, 0],
				"north": [6, 6],
				"south": [18, 6]
			},
			"texture_size": [24, 12]
		}
	],
	"heavy_core": [
		{
			"pos": [4, 0, 4],
			"size": [8, 8, 8],
			"uv": {
				"side": [0, 8],
				"up": [0, 0],
				"down": [8, 0]
			}
		}
	],
	"template_small_redstone_torch": [ // only used in repeaters and comparators
		{
			"pos": [0, 0, 0],
			"size": [2, 5, 2],
			"uv": {
				"up": [7, 6],
				"down": [7, 14],
				"side": [7, 6]
			}
		}
	],
	"repeater": [
		{
			"pos": [0, 0, 0],
			"size": [16, 2, 16]
		},
		{
			"copy": "template_small_redstone_torch",
			"translate": [7, 2, 2],
			"terrain_texture": "repeater_torch"
		},
		{
			"if": "repeater_delay == 0",
			"copy": "template_small_redstone_torch",
			"translate": [7, 2, 6],
			"terrain_texture": "repeater_torch"
		},
		{
			"if": "repeater_delay == 1",
			"copy": "template_small_redstone_torch",
			"translate": [7, 2, 8],
			"terrain_texture": "repeater_torch"
		},
		{
			"if": "repeater_delay == 2",
			"copy": "template_small_redstone_torch",
			"translate": [7, 2, 10],
			"terrain_texture": "repeater_torch"
		},
		{
			"if": "repeater_delay == 3",
			"copy": "template_small_redstone_torch",
			"translate": [7, 2, 12],
			"terrain_texture": "repeater_torch"
		}
	],
	"comparator": [
		{
			"pos": [0, 0, 0],
			"size": [16, 2, 16]
		},
		{
			"copy": "template_small_redstone_torch",
			"translate": [4, 2, 11],
			"terrain_texture": "comparator_torch"
		},
		{
			"copy": "template_small_redstone_torch",
			"translate": [10, 2, 11],
			"terrain_texture": "comparator_torch"
		},
		{
			"if": "output_subtract_bit == 0",
			"pos": [7, 2, 2],
			"size": [2, 2, 2],
			"terrain_texture": "comparator_torch",
			"ignore_eigenvariant": true,
			"uv": {
				"*": [7, 6]
			}
		},
		{
			"if": "output_subtract_bit == 1",
			"pos": [7, 2, 2],
			"size": [2, 3, 2],
			"terrain_texture": "comparator_torch",
			"ignore_eigenvariant": true,
			"uv": {
				"*": [7, 6]
			}
		}
	],
	"liquid": [
		{
			"if": "liquid_depth == 0",
			"pos": [0, 0, 0],
			"size": [16, 14, 16]
		},
		{
			"if": "liquid_depth == 1",
			"pos": [0, 0, 0],
			"size": [16, 12.5, 16]
		},
		{
			"if": "liquid_depth == 2",
			"pos": [0, 0, 0],
			"size": [16, 10.5, 16]
		},
		{
			"if": "liquid_depth == 3",
			"pos": [0, 0, 0],
			"size": [16, 9, 16]
		},
		{
			"if": "liquid_depth == 4",
			"pos": [0, 0, 0],
			"size": [16, 7, 16]
		},
		{
			"if": "liquid_depth == 5",
			"pos": [0, 0, 0],
			"size": [16, 5.5, 16]
		},
		{
			"if": "liquid_depth == 6",
			"pos": [0, 0, 0],
			"size": [16, 3.5, 16]
		},
		{
			"if": "liquid_depth == 7",
			"pos": [0, 0, 0],
			"size": [16, 1.5, 16]
		},
		{
			"if": "liquid_depth >= 8",
			"pos": [0, 0, 0],
			"size": [16, 16, 16]
		}
	],
	"scaffolding": [ // todo: fix top bit
		{
			"pos": [0, 14, 0],
			"size": [16, 2, 16],
			"textures": {
				"down": "none"
			}
		},
		{
			"pos": [0, 0, 0],
			"size": [2, 14, 2]
		},
		{
			"pos": [14, 0, 0],
			"size": [2, 14, 2]
		},
		{
			"pos": [0, 0, 14],
			"size": [2, 14, 2]
		},
		{
			"pos": [14, 0, 14],
			"size": [2, 14, 2]
		},
		{
			"if": "stability > 0",
			"pos": [2, 0, 0],
			"size": [12, 2, 2],
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "stability > 0",
			"pos": [2, 0, 14],
			"size": [12, 2, 2],
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "stability > 0",
			"pos": [0, 0, 2],
			"size": [2, 2, 12],
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "stability > 0",
			"pos": [14, 0, 2],
			"size": [2, 2, 12],
			"textures": {
				"*": "down"
			}
		}
	],
	"hopper": [
		{ // hoppers in bedrock actually have an extra pixel inset on the top texture but it's hardly noticeable.
			"pos": [2, 10, 2],
			"size": [12, 1, 12],
			"textures": {
				"up": "down"
			}
		},
		{
			"pos": [0, 10, 0],
			"size": [16, 6, 2]
		},
		{
			"pos": [0, 10, 14],
			"size": [16, 6, 2]
		},
		{
			"pos": [0, 10, 2],
			"size": [2, 6, 12]
		},
		{
			"pos": [14, 10, 2],
			"size": [2, 6, 12]
		},
		{
			"pos": [4, 4, 4],
			"size": [8, 6, 8],
			"textures": {
				"*": "west"
			}
		},
		{
			"if": "facing_direction == 0", // facing down
			"pos": [6, 0, 6],
			"size": [4, 4, 4],
			"textures": {
				"*": "west"
			}
		},
		{
			"if": "facing_direction > 0", // facing other directions. this is north; other directions are just rotations.
			"pos": [6, 4, 0],
			"size": [4, 4, 4],
			"textures": {
				"*": "west"
			}
		}
	],
	"wall_sign": [ // todo: make signs more accurate, use proper texture
		{
			"pos": [0, 4, 14],
			"size": [16, 8, 2]
		}
	],
	"standing_sign": [ // todo: fix scaling since sign pixels are smaller than regular pixels
		{
			"pos": [7, 0, 7],
			"size": [2, 8, 2]
		},
		{
			"pos": [0, 8, 7],
			"size": [16, 8, 2]
		}
	],
	"top_snow": [
		{
			"if": "height == 0",
			"pos": [0, 0, 0],
			"size": [16, 2, 16]
		},
		{
			"if": "height == 1",
			"pos": [0, 0, 0],
			"size": [16, 4, 16]
		},
		{
			"if": "height == 2",
			"pos": [0, 0, 0],
			"size": [16, 6, 16]
		},
		{
			"if": "height == 3",
			"pos": [0, 0, 0],
			"size": [16, 8, 16]
		},
		{
			"if": "height == 4",
			"pos": [0, 0, 0],
			"size": [16, 10, 16]
		},
		{
			"if": "height == 5",
			"pos": [0, 0, 0],
			"size": [16, 12, 16]
		},
		{
			"if": "height == 6",
			"pos": [0, 0, 0],
			"size": [16, 14, 16]
		},
		{
			"if": "height == 7",
			"pos": [0, 0, 0],
			"size": [16, 16, 16]
		}
	],
	"anvil": [
		{
			"pos": [2, 0, 2],
			"size": [12, 4, 12],
			"textures": {
				"*": "side"
			}
		},
		{
			"pos": [4, 4, 3],
			"size": [8, 1, 10],
			"textures": {
				"*": "side" // this is the small, thin plate above the base; interestingly, the cracked texture is on this bit as well. however, on Java it has the "correct texture", so I'm going with that.
			}
		},
		{
			"pos": [6, 5, 4],
			"size": [4, 5, 8]
		},
		{
			"pos": [3, 10, 0],
			"size": [10, 6, 16]
		}
	],
	"template_candle_tall": [ // at origin
		{
			"pos": [0, 0, 0],
			"size": [2, 6, 2],
			"uv": {
				"side": [0, 8],
				"up": [0, 6],
				"down": [0, 14]
			}
		},
		{
			"pos": [0.5, 6, 1],
			"size": [1, 1, 0],
			"rot": [0, 45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		},
		{
			"pos": [0.5, 6, 1],
			"size": [1, 1, 0],
			"rot": [0, -45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		}
	],
	"template_candle_medium": [
		{
			"pos": [0, 0, 0],
			"size": [2, 5, 2],
			"uv": {
				"side": [0, 8],
				"up": [0, 6],
				"down": [0, 14]
			}
		},
		{
			"pos": [0.5, 5, 1],
			"size": [1, 1, 0],
			"rot": [0, 45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		},
		{
			"pos": [0.5, 5, 1],
			"size": [1, 1, 0],
			"rot": [0, -45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		}
	],
	"template_candle_short": [
		{
			"pos": [0, 0, 0],
			"size": [2, 3, 2],
			"uv": {
				"side": [0, 8],
				"up": [0, 6],
				"down": [0, 14]
			}
		},
		{
			"pos": [0.5, 3, 1],
			"size": [1, 1, 0],
			"rot": [0, 45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		},
		{
			"pos": [0.5, 3, 1],
			"size": [1, 1, 0],
			"rot": [0, -45, 0],
			"pivot": [1, 0, 1],
			"uv": {
				"*": [0, 5]
			}
		}
	],
	"candles": [
		{
			"if": "candles == 0",
			"copy": "template_candle_tall",
			"translate": [7, 0, 7]
		},
		{
			"if": "candles == 1",
			"copy": "template_candle_tall",
			"translate": [5, 0, 7]
		},
		{
			"if": "candles == 1",
			"copy": "template_candle_medium",
			"translate": [9, 0, 8]
		},
		{
			"if": "candles == 2",
			"copy": "template_candle_tall",
			"translate": [6, 0, 6]
		},
		{
			"if": "candles == 2",
			"copy": "template_candle_medium",
			"translate": [9, 0, 7]
		},
		{
			"if": "candles == 2",
			"copy": "template_candle_short",
			"translate": [7, 0, 9]
		},
		{
			"if": "candles == 3",
			"copy": "template_candle_tall",
			"translate": [6, 0, 5]
		},
		{
			"if": "candles == 3",
			"copy": "template_candle_medium",
			"translate": [9, 0, 5]
		},
		{
			"if": "candles == 3",
			"copy": "template_candle_medium",
			"translate": [5, 0, 8]
		},
		{
			"if": "candles == 3",
			"copy": "template_candle_short",
			"translate": [8, 0, 8]
		}
	],
	"candle_cake": [
		{
			"copy": "cake",
			"block_states": {
				"bite_counter": 0, // use the full cake model
				"lit": 0 // without this, lit candle cakes would show the inside texture on the west
			}
		},
		{
			"copy": "template_candle_tall",
			"translate": [7, 8, 7],
			"terrain_texture": "${#block_name[:-5]}" // block name is blue_candle_cake, we need to remove _cake
		}
	],
	"stonecutter": [
		{
			"pos": [0, 0, 0],
			"size": [16, 9, 16],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [1, 9, 8],
			"size": [14, 7, 0],
			"textures": {
				"*": "west"
			},
			"uv": {
				"*": [1, 9]
			}
		}
	],
	"grindstone": [ // standing; will be rotated later
		{
			"pos": [2, 0, 6],
			"size": [2, 7, 4],
			"textures": {
				"*": "down"
			}
		},
		{
			"pos": [12, 0, 6],
			"size": [2, 7, 4],
			"textures": {
				"*": "down"
			}
		},
		{
			"pos": [2, 7, 5],
			"size": [2, 6, 6],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [12, 7, 5],
			"size": [2, 6, 6],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [4, 4, 2],
			"size": [8, 12, 12],
			"textures": {
				"north": "up",
				"south": "up",
				"down": "up"
			},
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"template_bell_main": [
		{
			"pos": [0, 0, 0],
			"size": [8, 2, 8],
			"textures": {
				"up": "down",
				"side": "north"
			},
			"uv": {
				"side": [0, 7],
				"down": [0, 0],
				"up": [0, 0]
			}
		},
		{
			"pos": [1, 2, 1],
			"size": [6, 7, 6],
			"textures": {
				"side": "north",
				"down": "up"
			},
			"uv": {
				"side": [1, 0],
				"down": [1, 1],
				"up": [1, 1]
			}
		}
	],
	"bell": [
		{
			"if": "attachment == standing",
			"copy": "template_bell_main",
			"translate": [4, 1, 4]
		},
		{
			"if": "attachment == standing",
			"pos": [2, 10, 7],
			"size": [12, 2, 2],
			"textures": {
				"*": "east" // wooden beam
			}
		},
		{
			"if": "attachment == standing",
			"pos": [0, 0, 6],
			"size": [2, 13, 4],
			"textures": {
				"*": "west" // stone
			}
		},
		{
			"if": "attachment == standing",
			"pos": [14, 0, 6],
			"size": [2, 13, 4],
			"textures": {
				"*": "west" // stone
			}
		},
		{
			"if": "attachment != standing",
			"copy": "template_bell_main",
			"translate": [4, 4, 4]
		},
		{
			"if": "attachment == hanging",
			"pos": [7, 13, 7],
			"size": [2, 3, 2],
			"textures": {
				"*": "east"
			}
		},
		{
			"if": "attachment == side",
			"pos": [7, 13, 0],
			"size": [2, 2, 13],
			"textures": {
				"*": "east"
			}
		},
		{
			"if": "attachment == multiple",
			"pos": [7, 13, 0],
			"size": [2, 2, 16],
			"textures": {
				"*": "east"
			}
		}
	],
	"template_lantern": [
		{
			"pos": [0, 0, 0],
			"size": [6, 7, 6],
			"uv": {
				"side": [0, 2],
				"down": [0, 9],
				"up": [0, 9]
			}
		},
		{
			"pos": [1, 7, 1],
			"size": [4, 2, 4],
			"uv": {
				"side": [1, 0],
				"up": [1, 10],
				"down": [1, 10]
			}
		}
	],
	"lantern": [
		{
			"if": "hanging == 0",
			"copy": "template_lantern",
			"translate": [5, 0, 5]
		},
		{
			"if": "hanging == 0",
			"pos": [6.5, 9, 8],
			"size": [3, 2, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [11, 10]
			}
		},
		{
			"if": "hanging == 0",
			"pos": [6.5, 9, 8],
			"size": [3, 2, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [11, 10]
			}
		},
		{
			"if": "hanging == 1",
			"copy": "template_lantern",
			"translate": [5, 2, 5]
		},
		{
			"if": "hanging == 1",
			"pos": [6.5, 11, 8],
			"size": [3, 5, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [11, 0]
			},
			"uv_sizes": {
				"*": [3, 6]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [6.5, 11, 8],
			"size": [3, 5, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [11, 6]
			},
			"uv_sizes": {
				"*": [3, 6]
			}
		}
	],
	"template_campfire_log_x": [
		{
			"pos": [0, 0, 0],
			"size": [16, 4, 4],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [0, 0],
				"west": [0, 4],
				"east": [0, 4]
			}
		}
	],
	"template_campfire_log_z": [
		{
			"pos": [0, 0, 0],
			"size": [16, 4, 4],
			"rot": [0, -90, 0],
			"pivot": [2, 0, 2],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [0, 0],
				"west": [0, 4],
				"east": [0, 4]
			}
		}
	],
	"campfire": [ // facing west
		{
			"copy": "template_campfire_log_z",
			"translate": [1, 0, 0]
		},
		{
			"copy": "template_campfire_log_z",
			"translate": [11, 0, 0]
		},
		{
			"copy": "template_campfire_log_x",
			"translate": [0, 3, 1]
		},
		{
			"copy": "template_campfire_log_x",
			"translate": [0, 3, 11]
		},
		{
			"if": "extinguished == 0",
			"pos": [0, 0, 5],
			"size": [16, 1, 6],
			"rot": [0, 90, 0],
			"textures": {
				"*": "side"
			},
			"uv": {
				"*": [0, 14],
				"down": [0, 8],
				"up": [0, 8]
			}
		},
		{
			"if": "extinguished == 1",
			"pos": [0, 0, 5],
			"size": [16, 1, 6],
			"rot": [0, 90, 0],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [0, 14],
				"down": [0, 8],
				"up": [0, 8]
			}
		},
		{
			"if": "extinguished == 0",
			"pos": [-2, 1, 8],
			"size": [20, 15, 0],
			"rot": [0, 45, 0],
			"textures": {
				"*": "up"
			},
			"uv": {
				"*": [0, 0]
			},
			"uv_sizes": {
				"*": [16, 16]
			}
		},
		{
			"if": "extinguished == 0",
			"pos": [-2, 1, 8],
			"size": [20, 15, 0],
			"rot": [0, -45, 0],
			"textures": {
				"*": "up"
			},
			"uv": {
				"*": [0, 0]
			},
			"uv_sizes": {
				"*": [16, 16]
			}
		}
	],
	"dragon_egg": [
		{
			"pos": [6, 15, 6],
			"size": [4, 1, 4]
		},
		{
			"pos": [5, 13, 5],
			"size": [6, 2, 6]
		},
		{
			"pos": [3, 11, 3],
			"size": [10, 2, 10]
		},
		{
			"pos": [2, 8, 2],
			"size": [12, 3, 12]
		},
		{
			"pos": [1, 3, 1],
			"size": [14, 5, 14]
		},
		{
			"pos": [2, 1, 2],
			"size": [12, 2, 12]
		},
		{
			"pos": [3, 0, 3],
			"size": [10, 1, 10]
		}
	],
	"sniffer_egg": [
		{
			"pos": [1, 0, 2],
			"size": [14, 16, 12],
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"turtle_eggs": [
		{
			"pos": [6, 0, 4],
			"size": [5, 7, 5],
			"uv": {
				"side": [1, 4],
				"down": [0, 0],
				"up": [0, 0]
			},
			"uv_sizes": {
				"side": [4, 7],
				"down": [4, 4],
				"up": [4, 4]
			}
		},
		{
			"if": "turtle_egg_count == two_egg || turtle_egg_count == three_egg || turtle_egg_count == four_egg",
			"pos": [11, 0, 7],
			"size": [4, 5, 4],
			"uv": {
				"side": [10, 10],
				"down": [6, 7],
				"up": [6, 7]
			}
		},
		{
			"if": "turtle_egg_count == three_egg || turtle_egg_count == four_egg",
			"pos": [2, 0, 7],
			"size": [3, 4, 3],
			"uv": {
				"side": [8, 3],
				"down": [5, 0],
				"up": [5, 0]
			}
		},
		{
			"if": "turtle_egg_count == four_egg",
			"pos": [6, 0, 10],
			"size": [3, 3, 3],
			"uv": {
				"side": [4, 11],
				"down": [0, 11],
				"up": [0, 11]
			},
			"uv_sizes": {
				"*": [4, 4]
			}
		}
	],
	"end_rod": [
		{
			"pos": [6, 0, 6],
			"size": [4, 1, 4],
			"uv": {
				"*": [2, 2]
			}
		},
		{
			"pos": [7, 1, 7],
			"size": [2, 15, 2],
			"uv": {
				"side": [0, 0],
				"down": [2, 0],
				"up": [2, 0]
			}
		}
	],
	"end_portal_frame": [
		{
			"pos": [0, 0, 0],
			"size": [16, 13, 16]
		},
		{
			"if": "end_portal_eye_bit == 1",
			"pos": [4, 13, 4],
			"size": [8, 3, 8],
			"textures": {
				"*": "carried"
			},
			"uv": {
				"side": [4, 0],
				"down": [4, 4],
				"up": [4, 4]
			}
		}
	],
	"end_portal": [
		{
			"pos": [0, 12, 0],
			"size": [16, 0, 16],
			"textures": {
				"*": "textures/entity/end_portal"
			},
			"texture_size": [256, 256],
			"uv_sizes": {
				"*": [64, 64] // this just scales it up so the little blue specs are more visible
			},
			"tint": "#56A5AA" // average colour of textures/environment/end_portal_colors.png
		}
	],
	"end_gateway": [ // basically an end portal cube. does not do justice to how cool it looks in the game.
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"*": "textures/entity/end_portal"
			},
			"texture_size": [256, 256],
			"uv_sizes": {
				"*": [64, 64]
			},
			"tint": "#56A5AA"
		}
	],
	"observer": [ // the top face is rotated
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"up": "none"
			}
		},
		{
			"pos": [0, 15, 0],
			"size": [16, 1, 16], // we can't make it 0-height as that will automatically use the down face and flip it back to the wrong way
			"rot": [0, 180, 0],
			"textures": {
				"side": "none",
				"down": "none"
			}
		}
	],
	"composter": [
		{
			"pos": [2, 0, 2],
			"size": [12, 2, 12],
			"textures": {
				"up": "down"
			},
			"variant": 0
		},
		{
			"pos": [0, 0, 0],
			"size": [2, 16, 16],
			"textures": {
				"up": "down"
			},
			"variant": 0
		},
		{
			"pos": [14, 0, 0],
			"size": [2, 16, 16],
			"textures": {
				"up": "down"
			},
			"variant": 0
		},
		{
			"pos": [2, 0, 0],
			"size": [12, 16, 2],
			"textures": {
				"up": "down"
			},
			"variant": 0
		},
		{
			"pos": [2, 0, 14],
			"size": [12, 16, 2],
			"textures": {
				"up": "down"
			},
			"variant": 0
		},
		{
			"if": "composter_fill_level == 1",
			"pos": [2, 2, 2],
			"size": [12, 1, 12]
		},
		{
			"if": "composter_fill_level == 2",
			"pos": [2, 2, 2],
			"size": [12, 3, 12]
		},
		{
			"if": "composter_fill_level == 3",
			"pos": [2, 2, 2],
			"size": [12, 5, 12]
		},
		{
			"if": "composter_fill_level == 4",
			"pos": [2, 2, 2],
			"size": [12, 7, 12]
		},
		{
			"if": "composter_fill_level == 5",
			"pos": [2, 2, 2],
			"size": [12, 9, 12]
		},
		{
			"if": "composter_fill_level == 6",
			"pos": [2, 2, 2],
			"size": [12, 11, 12]
		},
		{
			"if": "composter_fill_level >= 7",
			"pos": [2, 2, 2],
			"size": [12, 13, 12]
		}
	],
	"piston": [
		{
			"if": "entity.State == 0 || entity.State == 3", // unextended or pulling
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"up": "carried.up"
			}
		},
		{
			"if": "entity.State == 1 || entity.State == 2", // pushing or extended
			"pos": [0, 0, 0],
			"size": [16, 12, 16]
		},
		{
			"if": "entity.State == 1 || entity.State == 2", // pushing or extended
			"pos": [5, 12, 5],
			"size": [6, 8, 6],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [128, 32],
			"uv": {
				"side": [64, 24],
				"up": [70, 18],
				"down": [70, 18] // todo: cull this face
			}
		},
		{
			"if": "entity.State == 1 || entity.State == 2", // pushing or extended
			"pos": [6, 20, 6],
			"size": [4, 8, 4],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [128, 32],
			"uv": {
				"side": [64, 4]
			}
		},
		{
			"if": "entity.Sticky == 0 && entity.State == 1 || entity.Sticky == 0 && entity.State == 2", // pushing or extended
			"pos": [0, 28, 0],
			"size": [16, 4, 16],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [128, 32],
			"uv": {
				"side": [0, 16],
				"down": [32, 0],
				"up": [16, 0]
			}
		},
		{
			"if": "entity.Sticky == 1 && entity.State == 1 || entity.Sticky == 1 && entity.State == 2", // pushing or extended
			"pos": [0, 28, 0],
			"size": [16, 4, 16],
			"textures": {
				"*": "#tex"
			},
			"texture_size": [128, 32],
			"uv": {
				"side": [0, 16],
				"down": [32, 0],
				"up": [16, 0]
			}
		}
	],
	"dispenser": [
		{
			"if": "facing_direction >= 2", // sideways
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"side": "north",
				"north": "south"
			}
		},
		{
			"if": "facing_direction < 2", // up or down
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"side": "up",
				"down": "east"
			}
		}
	],
	"barrel": [
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"side": "west",
				"up": "north",
				"down": "south"
			}
		}
	],
	"furnace": [ // facing south by default
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"south": "north",
				"north": "south"
			}
		}
	],
	"lit_furnace": [ // facing east by default
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"textures": {
				"east": "north",
				"north": "east"
			}
		}
	],
	"glass_pane": [ // todo: add connections to other blocks correctly
		{
			"pos": [7, 0, 0],
			"size": [2, 16, 16],
			"textures": {
				"east": "up",
				"up": "east",
				"down": "east"
			}
		}
	],
	"item_frame": [
		{
			"pos": [3, 3, 15.5],
			"size": [10, 10, 0.5]
		},
		{
			"pos": [2, 2, 15],
			"size": [12, 1, 1],
			"textures": {
				"*": "textures/blocks/planks_birch"
			}
		},
		{
			"pos": [2, 13, 15],
			"size": [12, 1, 1],
			"textures": {
				"*": "textures/blocks/planks_birch"
			}
		},
		{
			"pos": [2, 3, 15],
			"size": [1, 10, 1],
			"textures": {
				"*": "textures/blocks/planks_birch"
			}
		},
		{
			"pos": [13, 3, 15],
			"size": [1, 10, 1],
			"textures": {
				"*": "textures/blocks/planks_birch"
			}
		}
	],
	"bubble_column": [ // this is like when the fancy bubbles setting is off
		{
			"pos": [1, 0, 1],
			"size": [14, 16, 14],
			"textures": {
				"side": "north",
				"up": "none",
				"down": "none"
			}
		},
		{
			"pos": [5, 0, 5],
			"size": [6, 16, 6],
			"textures": {
				"side": "south",
				"up": "none",
				"down": "none"
			}
		}
	],
	"pointed_dripstone": [
		{
			"copy": "cross_texture",
			"terrain_texture": "pointed_dripstone_${#block_states.dripstone_thickness}"
		}
	],
	"decorated_pot": [
		{
			"pos": [1, 0, 1],
			"size": [14, 16, 14],
			"variant": 0,
			"textures": {
				"up": "none",
				"down": "none",
				"west": "textures/blocks/${#block_entity_data.sherds[1][10:-6] ?? SET_WHOLE_STRING(side)}_pattern", // sherd name is minecraft:idk_pottery_sherd, we want to look at textures/blocks/idk_pottery_pattern
				"east": "textures/blocks/${#block_entity_data.sherds[2][10:-6] ?? SET_WHOLE_STRING(side)}_pattern",
				"north": "textures/blocks/${#block_entity_data.sherds[0][10:-6] ?? SET_WHOLE_STRING(side)}_pattern",
				"south": "textures/blocks/${#block_entity_data.sherds[3][10:-6] ?? SET_WHOLE_STRING(side)}_pattern"
			}
		},
		{
			"pos": [1, 0, 1],
			"size": [14, 16, 14],
			"variant": 1,
			"texture_size": [32, 32],
			"textures": {
				"side": "none" // this is just the top and bottom. the texture is stored in a different file which is why it must be split up into 2 cubes :/
			},
			"uv": {
				"up": [0, 13],
				"down": [0, 13]
			}
		},
		{
			"pos": [5, 16, 5],
			"size": [6, 1, 6],
			"variant": 1,
			"texture_size": [32, 32],
			"textures": {
				"up": "none",
				"down": "none"
			},
			"uv": {
				"side": [0, 11]
			}
		},
		{
			"pos": [4, 17, 4],
			"size": [8, 3, 8],
			"variant": 1,
			"texture_size": [32, 32],
			"uv": {
				"side": [0, 8],
				"up": [8, 0],
				"down": [16, 0]
			}
		}
	],
	"cactus": [
		{
			"pos": [0, 0, 1],
			"size": [16, 16, 14],
			"textures": {
				"east": "none",
				"west": "none",
				"up": "none",
				"down": "none"
			}
		},
		{
			"pos": [1, 0, 0],
			"size": [14, 16, 16],
			"textures": {
				"north": "none",
				"south": "none",
				"up": "none",
				"down": "none"
			}
		},
		{
			"pos": [1, 0, 1],
			"size": [14, 16, 14],
			"textures": {
				"side": "none"
			}
		}
	],
	"double_plant": [
		{
			"if": "upper_block_bit == 0",
			"copy": "cross_texture",
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "upper_block_bit == 1",
			"copy": "cross_texture",
			"textures": {
				"*": "up"
			}
		}
	],
	"sunflower": [
		{
			"copy": "double_plant"
		},
		{
			"if": "upper_block_bit == 1",
			"pos": [6.4, -0.5, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, 20],
			"uv": {
				"*": [0, 0]
			},
			"variant": 0 // this is the front texture
		},
		{
			"if": "upper_block_bit == 1",
			"pos": [6.7, -0.5, 0],
			"size": [0, 16, 16],
			"rot": [0, 0, 20],
			"uv": {
				"*": [0, 0]
			},
			"variant": 1 // this is the back texture
		}
	],
	"mangrove_propagule": [
		{
			"if": "hanging == 0",
			"copy": "cross_texture"
		},
		{
			"if": "hanging == 1",
			"pos": [7, 14, 8],
			"size": [2, 2, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 14, 8],
			"size": [2, 2, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 13, 7],
			"size": [2, 1, 2],
			"uv": {
				"up": [0, 0],
				"side": [0, 2],
				"down": [0, 3]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 13.4142, 8.9176], // tan(22.5deg) = √2 - 1, 13 + tan(22.5deg) = 12 + √2 ≈ 13.4142, 8 + 2 - √(1^2 + tan(22.5deg)^2) = 10 - √(4 - 2√2) ≈ 8.9176
			"size": [2, 0, 2],
			"rot": [-22.5, 0, 0],
			"pivot": [8, 13.4142, 8],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 13.4142, 8.9176],
			"size": [2, 0, 2],
			"rot": [-22.5, 90, 0],
			"pivot": [8, 13.4142, 8],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 13.4142, 8.9176],
			"size": [2, 0, 2],
			"rot": [-22.5, 180, 0],
			"pivot": [8, 13.4142, 8],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "hanging == 1",
			"pos": [7, 13.4142, 8.9176],
			"size": [2, 0, 2],
			"rot": [-22.5, -90, 0],
			"pivot": [8, 13.4142, 8],
			"uv": {
				"*": [8, 3]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage > 0",
			"pos": [7, 10, 7],
			"size": [2, 3, 2],
			"uv": {
				"*": [0, 7],
				"down": [0, 10]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 2",
			"pos": [7, 7, 8],
			"size": [2, 3, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [3, 7]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 2",
			"pos": [7, 7, 8],
			"size": [2, 3, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [3, 7]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 3",
			"pos": [7, 3, 8],
			"size": [2, 7, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [3, 3]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 3",
			"pos": [7, 3, 8],
			"size": [2, 7, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [3, 3]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 4",
			"pos": [7, 0, 8],
			"size": [2, 10, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [3, 0]
			}
		},
		{
			"if": "hanging == 1 && propagule_stage == 4",
			"pos": [7, 0, 8],
			"size": [2, 10, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [3, 0]
			}
		}
	],
	"pitcher_plant": [
		{
			"copy": "double_plant",
			"translate": [0, -6, 0]
		}
	],
	"pitcher_crop": [
		{
			"if": "growth == 0",
			"pos": [5, -1, 5],
			"size": [6, 4, 6],
			"textures": {
				"side": "north"
			},
			"uv": {
				"side": [5, 10]
			}
		},
		{
			"if": "growth > 0 && upper_block_bit == 0",
			"pos": [3, -1, 3],
			"size": [10, 6, 10],
			"textures": {
				"side": "north"
			},
			"uv": {
				"side": [3, 10]
			}
		},
		{
			"if": "growth >= 1 && growth <= 2",
			"copy": "cross_texture",
			"translate": [0, 5, 0],
			"textures": {
				"*": "south"
			},
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"if": "growth >= 3 && upper_block_bit == 0",
			"copy": "cross_texture",
			"textures": {
				"*": "south"
			}
		},
		{
			"if": "growth == 3 && upper_block_bit == 1",
			"copy": "cross_texture",
			"textures": {
				"*": "east"
			},
			"variant": 0
		},
		{
			"if": "growth == 4 && upper_block_bit == 1",
			"copy": "cross_texture",
			"textures": {
				"*": "east"
			},
			"variant": 1
		}
	],
	"plant_stem": [ // Quick note on tints for these: They are generated in net/minecraft/client/color/block/BlockColors.java (at least of 1.19), and the formula is [r, g, b] = [i * 32, 255 - i * 8, i * 4] where i is the growth stage (0-7).
		{
			"if": "growth == 0",
			"pos": [0, -1, 8],
			"size": [16, 1, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#00FF00"
		},
		{
			"if": "growth == 0",
			"pos": [0, -1, 8],
			"size": [16, 1, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#00FF00"
		},
		{
			"if": "growth == 1",
			"pos": [0, -1, 8],
			"size": [16, 3, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#20F704"
		},
		{
			"if": "growth == 1",
			"pos": [0, -1, 8],
			"size": [16, 3, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#20F704"
		},
		{
			"if": "growth == 2",
			"pos": [0, -1, 8],
			"size": [16, 5, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#40EF08"
		},
		{
			"if": "growth == 2",
			"pos": [0, -1, 8],
			"size": [16, 5, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#40EF08"
		},
		{
			"if": "growth == 3",
			"pos": [0, -1, 8],
			"size": [16, 7, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#60E70C"
		},
		{
			"if": "growth == 3",
			"pos": [0, -1, 8],
			"size": [16, 7, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#60E70C"
		},
		{
			"if": "growth == 4",
			"pos": [0, -1, 8],
			"size": [16, 9, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#80DF10"
		},
		{
			"if": "growth == 4",
			"pos": [0, -1, 8],
			"size": [16, 9, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#80DF10"
		},
		{
			"if": "growth == 5",
			"pos": [0, -1, 8],
			"size": [16, 11, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#A0D714"
		},
		{
			"if": "growth == 5",
			"pos": [0, -1, 8],
			"size": [16, 11, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#A0D714"
		},
		{
			"if": "growth == 6",
			"pos": [0, -1, 8],
			"size": [16, 13, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#C0CF18"
		},
		{
			"if": "growth == 6",
			"pos": [0, -1, 8],
			"size": [16, 13, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#C0CF18"
		},
		{
			"if": "growth == 7 && facing_direction < 2",
			"pos": [0, -1, 8],
			"size": [16, 15, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#E0C71C"
		},
		{
			"if": "growth == 7 && facing_direction < 2",
			"pos": [0, -1, 8],
			"size": [16, 15, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#E0C71C"
		},
		{
			"if": "growth == 7 && facing_direction >= 2",
			"pos": [0, -1, 8],
			"size": [16, 7, 0],
			"rot": [0, 45, 0],
			"uv": {
				"*": [0, 1]
			},
			"variant": 0,
			"tint": "#E0C71C"
		},
		{
			"if": "growth == 7 && facing_direction >= 2",
			"pos": [0, -1, 8],
			"size": [16, 7, 0],
			"rot": [0, -45, 0],
			"uv": {
				"*": [0, 1]
			},
			"variant": 0,
			"tint": "#E0C71C"
		},
		{
			"if": "growth == 7 && facing_direction >= 2",
			"pos": [8, -1, 0],
			"size": [0, 15, 16],
			"uv": {
				"*": [0, 1]
			},
			"tint": "#E0C71C"
		}
	],
	"sweet_berry_bush": [
		{
			"if": "growth == 0",
			"copy": "cross_texture",
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "growth == 1",
			"copy": "cross_texture",
			"textures": {
				"*": "up"
			}
		},
		{
			"if": "growth == 2",
			"copy": "cross_texture",
			"textures": {
				"*": "north"
			}
		},
		{
			"if": "growth == 3",
			"copy": "cross_texture",
			"textures": {
				"*": "south"
			}
		}
	],
	"template_cauldron_liquid": [
		{
			"if": "fill_level == 1",
			"pos": [2, 5, 2],
			"size": [12, 0, 12]
		},
		{
			"if": "fill_level == 2",
			"pos": [2, 7, 2],
			"size": [12, 0, 12]
		},
		{
			"if": "fill_level == 3",
			"pos": [2, 9, 2],
			"size": [12, 0, 12]
		},
		{
			"if": "fill_level == 4",
			"pos": [2, 11, 2],
			"size": [12, 0, 12]
		},
		{
			"if": "fill_level == 5",
			"pos": [2, 13, 2],
			"size": [12, 0, 12]
		},
		{
			"if": "fill_level == 6",
			"pos": [2, 15, 2],
			"size": [12, 0, 12]
		}
	],
	"cauldron": [
		{ // walls
			"pos": [0, 3, 0],
			"size": [2, 13, 16],
			"textures": {
				"side": "north",
				"down": "south"
			}
		},
		{
			"pos": [14, 3, 0],
			"size": [2, 13, 16],
			"textures": {
				"side": "north",
				"down": "south"
			}
		},
		{
			"pos": [2, 3, 0],
			"size": [12, 13, 2],
			"textures": {
				"side": "north",
				"down": "south"
			}
		},
		{
			"pos": [2, 3, 14],
			"size": [12, 13, 2],
			"textures": {
				"side": "north",
				"down": "south"
			}
		},
		{ // bottom
			"pos": [2, 3, 2],
			"size": [12, 1, 12],
			"textures": {
				"*": "south" // inside
			}
		},
		{ // legs :((
			"pos": [0, 0, 0],
			"size": [4, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [0, 0, 2],
			"size": [2, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [12, 0, 0],
			"size": [4, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [14, 0, 2],
			"size": [2, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [0, 0, 14],
			"size": [4, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [0, 0, 12],
			"size": [2, 3, 4],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [12, 0, 14],
			"size": [4, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{
			"pos": [14, 0, 12],
			"size": [2, 3, 2],
			"textures": {
				"side": "north"
			}
		},
		{ // cauldron contents
			"if": "cauldron_liquid == lava",
			"copy": "template_cauldron_liquid",
			"terrain_texture": "still_lava"
		},
		{
			"if": "cauldron_liquid == water", // TODO: add support for potions, currently they just display the water colour
			"copy": "template_cauldron_liquid",
			"terrain_texture": "cauldron_water",
			"tint": "${#block_entity_data.CustomColor ?? 4280183682}" // 4283196761 = FF 4C 61 56 (ARGB) = water colour in swamp hills, it's the closest I could find to actual cauldron water
		},
		{
			"if": "cauldron_liquid == powder_snow",
			"copy": "template_cauldron_liquid",
			"terrain_texture": "powder_snow"
		}
	],
	"coral_fan": [
		{
			"pos": [0, 1, 8],
			"size": [16, 0, 16],
			"rot": [22.5, 0, 0],
			"pivot": [8, 0, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 1, 8],
			"size": [16, 0, 16],
			"rot": [22.5, 90, 0],
			"pivot": [8, 0, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 1, 8],
			"size": [16, 0, 16],
			"rot": [22.5, 180, 0],
			"pivot": [8, 0, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 1, 8],
			"size": [16, 0, 16],
			"rot": [22.5, -90, 0],
			"pivot": [8, 0, 8],
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"coral_wall_fan": [
		{
			"pos": [0, 8, 0],
			"size": [16, 0, 16],
			"rot": [11.25, 0, 0],
			"pivot": [8, 8, 0]
		}
	],
	"lightning_rod": [
		{
			"pos": [7, 0, 7],
			"size": [2, 12, 2],
			"uv": {
				"*": [0, 4]
			}
		},
		{
			"pos": [6, 12, 6],
			"size": [4, 4, 4],
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"lectern": [
		{
			"pos": [0, 0, 0],
			"size": [16, 2, 16],
			"textures": {
				"*": "east",
				"down": "down"
			},
			"uv": {
				"side": [0, 6],
				"south": [0, 14]
			}
		},
		{
			"pos": [4, 2, 4],
			"size": [8, 13, 8],
			"textures": {
				"*": "north" // TODO: use the proper side texture for east/west. currently it's rotated 90 degrees for no reason so we'll have to have a second cube. the in-game difference is barely noticeable.
			},
			"uv": {
				"side": [8, 3],
				"south": [0, 0]
			}
		},
		{
			"pos": [0.0125, 12, 0],
			"size": [15.975, 4, 13],
			"rot": [-22.5, 0, 0],
			"textures": {
				"side": "west"
			},
			"uv": {
				"side": [0, 4],
				"south": [0, 0],
				"up": [0, 1]
			}
		},
		{
			"if": "entity.hasBook ?? 0 == 1",
			"copy": "template_book",
			"rot": [-22.5, 0, 0],
			"pivot": [8, 0, 10],
			"translate": [0, 15.2, 2]
		}
	],
	"big_dripleaf": [
		{
			"if": "big_dripleaf_head == 0",
			"pos": [5.25, 0, 12],
			"size": [5.5, 16, 0],
			"rot": [0, 45, 0],
			"pivot": [8, 0, 12],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		},
		{
			"if": "big_dripleaf_head == 0",
			"pos": [5.5, 0, 12],
			"size": [5, 16, 0],
			"rot": [0, -45, 0],
			"pivot": [8, 0, 12],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		},
		{
			"if": "big_dripleaf_head == 1", // stem is 1px shorter on the top block
			"pos": [5.25, 0, 12],
			"size": [5.5, 15, 0],
			"rot": [0, 45, 0],
			"pivot": [8, 0, 12],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		},
		{
			"if": "big_dripleaf_head == 1",
			"pos": [5.5, 0, 12],
			"size": [5, 15, 0],
			"rot": [0, -45, 0],
			"pivot": [8, 0, 12],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		},
		{
			"if": "big_dripleaf_head == 1", // TODO: dripleaf head tipping???
			"pos": [0, 12, 0],
			"size": [16, 4, 16],
			"textures": {
				"up": "east",
				"down": "none",
				"south": "none",
				"north": "up",
				"side": "down"
			},
			"flip_textures_horizontally": ["east"],
			"translate": [0, -1, 0]
		}
	],
	"template_small_dripleaf_stem": [
		{
			"pos": [6, 0, 12],
			"size": [4, 16, 0],
			"rot": [0, 45, 0],
			"pivot": [8, 0, 12],
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		},
		{
			"pos": [6, 0, 12],
			"size": [4, 16, 0],
			"rot": [0, -45, 0],
			"pivot": [8, 0, 12],
			"uv": {
				"*": [5, 0]
			},
			"uv_sizes": {
				"*": [7, 16]
			}
		}
	],
	"template_small_dripleaf_leaf": [
		{
			"pos": [0, 0, 0],
			"size": [8, 1, 8],
			"pivot": [4, 0, 4],
			"textures": {
				"side": "down",
				"down": "none"
			},
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"small_dripleaf": [
		{
			"if": "upper_block_bit == 0",
			"copy": "template_small_dripleaf_stem",
			"textures": {
				"*": "south"
			}
		},
		{
			"if": "upper_block_bit == 1",
			"copy": "template_small_dripleaf_stem",
			"textures": {
				"*": "north"
			}
		},
		{
			"if": "upper_block_bit == 1",
			"copy": "template_small_dripleaf_leaf",
			"rot": [0, 90, 0],
			"translate": [0, 7, 4]
		},
		{
			"if": "upper_block_bit == 1",
			"copy": "template_small_dripleaf_leaf",
			"translate": [8, 13, 4]
		},
		{
			"if": "upper_block_bit == 1",
			"copy": "template_small_dripleaf_leaf",
			"rot": [0, -90, 0],
			"translate": [8, 2, 12]
		}
	],
	"spore_blossom": [
		{
			"pos": [0, 15.9, 0],
			"size": [16, 0, 16],
			"textures": {
				"*": "up"
			}
		},
		{
			"pos": [0, 15.7, 8],
			"size": [16, 0, 16],
			"rot": [-22.5, 0, 0],
			"pivot": [8, 16, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 15.7, 8],
			"size": [16, 0, 16],
			"rot": [-22.5, 90, 0],
			"pivot": [8, 16, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 15.7, 8],
			"size": [16, 0, 16],
			"rot": [-22.5, 180, 0],
			"pivot": [8, 16, 8],
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"pos": [0, 15.7, 8],
			"size": [16, 0, 16],
			"rot": [-22.5, -90, 0],
			"pivot": [8, 16, 8],
			"uv": {
				"*": [0, 0]
			}
		}
	],
	"template_brewing_stand_side": [ // this looks at the blockstate has_bottle which actually doesn't exist, but when we use this copy we set this to be the actual, relevant block state.
		{
			"if": "has_bottle == 0",
			"pos": [0, 0, 8],
			"size": [7, 16, 0],
			"uv": {
				"*": [9, 0]
			},
			"flip_textures_horizontally": ["*"]
		},
		{
			"if": "has_bottle == 1",
			"pos": [0, 0, 8],
			"size": [7, 16, 0]
		}
	],
	"brewing_stand": [
		{
			"pos": [7, 0, 7],
			"size": [2, 14, 2],
			"uv": {
				"up": [7, 7],
				"side": [7, 2]
			}
		},
		{
			"pos": [1, 0, 5],
			"size": [6, 2, 6],
			"textures": {
				"*": "down"
			}
		},
		{
			"pos": [9, 0, 1],
			"size": [6, 2, 6],
			"textures": {
				"*": "down"
			}
		},
		{
			"pos": [9, 0, 9],
			"size": [6, 2, 6],
			"textures": {
				"*": "down"
			}
		},
		{
			"copy": "template_brewing_stand_side",
			"block_states": {
				"has_bottle": "${#block_states.brewing_stand_slot_a_bit}"
			}
		},
		{
			"copy": "template_brewing_stand_side",
			"rot": [0, -135, 0],
			"block_states": {
				"has_bottle": "${#block_states.brewing_stand_slot_b_bit}"
			}
		},
		{
			"copy": "template_brewing_stand_side",
			"rot": [0, 135, 0],
			"block_states": {
				"has_bottle": "${#block_states.brewing_stand_slot_c_bit}"
			}
		}
	],
	"crafter": [
		{
			"pos": [0, 0, 0],
			"size": [16, 16, 16],
			"flip_textures_vertically": ["up"]
		}
	],
	"tripwire_hook": [
		{
			"pos": [6, 1, 14],
			"size": [4, 8, 2],
			"textures": {
				"*": "down"
			}
		},
		{
			"if": "attached_bit == 0 && powered_bit == 0",
			"pos": [6.2, 3.8, 7.9], // the hook is hollow both in-game and here
			"size": [3.6, 0.8, 3.6],
			"rot": [45, 0, 0],
			"pivot": [8, 6, 5.2],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 3]
			},
			"uv_sizes": {
				"*": [6, 1],
				"up": [6, 6],
				"down": [6, 6]
			}
		},
		{
			"if": "attached_bit == 0 && powered_bit == 0",
			"pos": [7.4, 5.2, 9.6],
			"size": [1.4, 1.6, 5.6],
			"rot": [-45, 0, 0],
			"pivot": [8, 6, 14],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [7, 9]
			},
			"uv_sizes": {
				"down": [2, 7],
				"up": [2, 7],
				"north": [2, 2],
				"south": [2, 2],
				"west": [7, 2],
				"east": [7, 2]
			}
		},
		{
			"if": "attached_bit == 1 && powered_bit == 0", // TODO: add bit of string for attached tripwires
			"pos": [6.2, 4.2, 6.7],
			"size": [3.6, 0.8, 3.6],
			"rot": [22.5, 0, 0],
			"pivot": [8, 4.2, 6.7],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 3]
			},
			"uv_sizes": {
				"*": [6, 1],
				"up": [6, 6],
				"down": [6, 6]
			}
		},
		{
			"if": "attached_bit == 1 && powered_bit == 0",
			"pos": [7.4, 5.2, 9.6],
			"size": [1.4, 1.6, 5.6],
			"rot": [10, 0, 0],
			"pivot": [7.4, 5.2, 10],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [7, 9]
			},
			"uv_sizes": {
				"down": [2, 7],
				"up": [2, 7],
				"north": [2, 2],
				"south": [2, 2],
				"west": [7, 2],
				"east": [7, 2]
			}
		},
		{
			"if": "powered_bit == 1",
			"pos": [6.2, 3.4, 6.7],
			"size": [3.6, 0.8, 3.6],
			"textures": {
				"*": "north"
			},
			"uv": {
				"*": [5, 3]
			},
			"uv_sizes": {
				"*": [6, 1],
				"up": [6, 6],
				"down": [6, 6]
			}
		},
		{
			"if": "powered_bit == 1",
			"pos": [7.4, 5.2, 9.6],
			"size": [1.4, 1.6, 5.6],
			"rot": [30, 0, 0],
			"pivot": [8, 6, 14],
			"textures": {
				"*": "down"
			},
			"uv": {
				"*": [7, 9]
			},
			"uv_sizes": {
				"down": [2, 7],
				"up": [2, 7],
				"north": [2, 2],
				"south": [2, 2],
				"west": [7, 2],
				"east": [7, 2]
			}
		}
	],
	"template_tripwire": [ // 4 individual cubes
		{
			"pos": [0, 4, 7.75],
			"size": [4, 0, 0.5],
			"uv_sizes": {
				"*": [16, 2]
			}
		},
		{
			"pos": [4, 4, 7.75],
			"size": [4, 0, 0.5],
			"uv_sizes": {
				"*": [16, 2]
			}
		},
		{
			"pos": [8, 4, 7.75],
			"size": [4, 0, 0.5],
			"uv_sizes": {
				"*": [16, 2]
			}
		},
		{
			"pos": [12, 4, 7.75],
			"size": [4, 0, 0.5],
			"uv_sizes": {
				"*": [16, 2]
			}
		}
	],
	"tripwire": [ // attached_bit: between 2 tripwires and unactivated, powered_bit: between 2 tripwires and activated, suspended_bit: regular string or between 2 tripwires and active
		{
			"if": "attached_bit == 0 && powered_bit == 0",
			"copy": "template_tripwire",
			"uv": {
				"*": [0, 0]
			}
		},
		{
			"if": "attached_bit == 1 || powered_bit == 1",
			"copy": "template_tripwire",
			"uv": {
				"*": [0, 6]
			}
		}
	],
	"chorus_flower": [
		{
			"pos": [2, 0, 2],
			"size": [12, 16, 12]
		},
		{
			"pos": [0, 2, 2],
			"size": [2, 12, 12]
		},
		{
			"pos": [2, 2, 0],
			"size": [12, 12, 2]
		},
		{
			"pos": [2, 2, 14],
			"size": [12, 12, 2]
		},
		{
			"pos": [14, 2, 2],
			"size": [2, 12, 12]
		}
	],
	"chorus_plant": [
		{
			"pos": [4, 0, 4],
			"size": [8, 16, 8]
		},
		{
			"pos": [3, 4, 4],
			"size": [1, 8, 8]
		},
		{
			"pos": [12, 4, 4],
			"size": [1, 8, 8]
		},
		{
			"pos": [5, 5, 2],
			"size": [6, 6, 2]
		}
	],
	"debug_auto_uv_4": [{"pos":[0,0,0],"size":[4,4,4]},{"pos":[0,0,4],"size":[4,4,4]},{"pos":[0,0,8],"size":[4,4,4]},{"pos":[0,0,12],"size":[4,4,4]},{"pos":[0,4,0],"size":[4,4,4]},{"pos":[0,4,4],"size":[4,4,4]},{"pos":[0,4,8],"size":[4,4,4]},{"pos":[0,4,12],"size":[4,4,4]},{"pos":[0,8,0],"size":[4,4,4]},{"pos":[0,8,4],"size":[4,4,4]},{"pos":[0,8,8],"size":[4,4,4]},{"pos":[0,8,12],"size":[4,4,4]},{"pos":[0,12,0],"size":[4,4,4]},{"pos":[0,12,4],"size":[4,4,4]},{"pos":[0,12,8],"size":[4,4,4]},{"pos":[0,12,12],"size":[4,4,4]},{"pos":[4,0,0],"size":[4,4,4]},{"pos":[4,0,4],"size":[4,4,4]},{"pos":[4,0,8],"size":[4,4,4]},{"pos":[4,0,12],"size":[4,4,4]},{"pos":[4,4,0],"size":[4,4,4]},{"pos":[4,4,12],"size":[4,4,4]},{"pos":[4,8,0],"size":[4,4,4]},{"pos":[4,8,12],"size":[4,4,4]},{"pos":[4,12,0],"size":[4,4,4]},{"pos":[4,12,4],"size":[4,4,4]},{"pos":[4,12,8],"size":[4,4,4]},{"pos":[4,12,12],"size":[4,4,4]},{"pos":[8,0,0],"size":[4,4,4]},{"pos":[8,0,4],"size":[4,4,4]},{"pos":[8,0,8],"size":[4,4,4]},{"pos":[8,0,12],"size":[4,4,4]},{"pos":[8,4,0],"size":[4,4,4]},{"pos":[8,4,12],"size":[4,4,4]},{"pos":[8,8,0],"size":[4,4,4]},{"pos":[8,8,12],"size":[4,4,4]},{"pos":[8,12,0],"size":[4,4,4]},{"pos":[8,12,4],"size":[4,4,4]},{"pos":[8,12,8],"size":[4,4,4]},{"pos":[8,12,12],"size":[4,4,4]},{"pos":[12,0,0],"size":[4,4,4]},{"pos":[12,0,4],"size":[4,4,4]},{"pos":[12,0,8],"size":[4,4,4]},{"pos":[12,0,12],"size":[4,4,4]},{"pos":[12,4,0],"size":[4,4,4]},{"pos":[12,4,4],"size":[4,4,4]},{"pos":[12,4,8],"size":[4,4,4]},{"pos":[12,4,12],"size":[4,4,4]},{"pos":[12,8,0],"size":[4,4,4]},{"pos":[12,8,4],"size":[4,4,4]},{"pos":[12,8,8],"size":[4,4,4]},{"pos":[12,8,12],"size":[4,4,4]},{"pos":[12,12,0],"size":[4,4,4]},{"pos":[12,12,4],"size":[4,4,4]},{"pos":[12,12,8],"size":[4,4,4]},{"pos":[12,12,12],"size":[4,4,4]}] // function genDebugGeo(step) {let boneCubes = [];for(let x = 0; x < 16; x += step) {for(let y = 0; y < 16; y += step) {for(let z = 0; z < 16; z += step) {if(!x || !y || !z || x == 16 - step || y == 16 - step || z == 16 - step) {boneCubes.push({ pos: [x, y, z], size: [step, step, step] });}}}}return JSON.stringify(boneCubes);}
}